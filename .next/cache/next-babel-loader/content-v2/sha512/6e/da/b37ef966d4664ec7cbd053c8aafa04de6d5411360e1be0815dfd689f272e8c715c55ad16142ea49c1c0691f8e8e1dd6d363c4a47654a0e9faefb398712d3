{"ast":null,"code":"import { createElement as _createElement } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Web\\\\films-search-react\\\\components\\\\Autocomplete\\\\Autocomplete.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./styles.module.scss\";\nimport { apiCall } from \"../../api/apiCall\";\nimport { useRoveFocus } from \"../../utils\";\nimport * as templates from \"./templates\";\n\nconst useFindFilm = filmName => {\n  const [error, setError] = React.useState(null);\n  const [query, setQuery] = React.useState(false);\n  const [loading, setLoading] = React.useState(false);\n  const [items, setItems] = React.useState([]);\n\n  const fetchFilms = async () => {\n    try {\n      setLoading(true);\n      setQuery(true);\n      const result = await apiCall(filmName);\n      setLoading(false);\n      setItems(result.results);\n    } catch (error) {\n      setItems([]);\n      setError(error);\n      setLoading(false);\n    }\n  };\n\n  React.useEffect(() => {\n    if (filmName !== \"\") {\n      const timeout = setTimeout(() => fetchFilms(), 700);\n      return () => clearTimeout(timeout);\n    }\n  }, [filmName]);\n  return {\n    items,\n    loading,\n    error,\n    query\n  };\n};\n\nexport const Autocomplete = props => {\n  const {\n    templateType,\n    filmName\n  } = props;\n  const {\n    items,\n    loading,\n    error,\n    query\n  } = useFindFilm(filmName);\n  const Template = templates[templateType];\n  const films = templateType === \"Poster\" ? items.slice(0, 3) : items;\n  const [focus, setFocus] = useRoveFocus(films.length);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.autocompleteStyling,\n      children: \"An error has occured.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.autocompleteStyling,\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (!query) {\n    return null;\n  } else if (query && items.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.autocompleteStyling,\n      children: \"No results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 12\n    }, this);\n  } else if (query && items.length !== 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.autocompleteStyling,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classNames(styles.autocompleteItems, {\n          [styles.posters]: templateType === \"Poster\"\n        }),\n        children: films.map((film, i) => /*#__PURE__*/_createElement(Template, _objectSpread(_objectSpread({}, film), {}, {\n          key: film.id,\n          index: i,\n          items: films,\n          focus: focus === i,\n          setFocus: setFocus,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }\n        })))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n};","map":{"version":3,"sources":["D:/Web/films-search-react/components/Autocomplete/Autocomplete.jsx"],"names":["React","classNames","styles","apiCall","useRoveFocus","templates","useFindFilm","filmName","error","setError","useState","query","setQuery","loading","setLoading","items","setItems","fetchFilms","result","results","useEffect","timeout","setTimeout","clearTimeout","Autocomplete","props","templateType","Template","films","slice","focus","setFocus","length","autocompleteStyling","autocompleteItems","posters","map","film","i","id"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport styles from \"./styles.module.scss\";\r\nimport { apiCall } from \"../../api/apiCall\";\r\nimport { useRoveFocus } from \"../../utils\";\r\nimport * as templates from \"./templates\";\r\n\r\nconst useFindFilm = (filmName) => {\r\n  const [error, setError] = React.useState(null);\r\n  const [query, setQuery] = React.useState(false);\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [items, setItems] = React.useState([]);\r\n\r\n  const fetchFilms = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setQuery(true);\r\n      const result = await apiCall(filmName);\r\n      setLoading(false);\r\n      setItems(result.results);\r\n    } catch (error) {\r\n      setItems([]);\r\n      setError(error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (filmName !== \"\") {\r\n      const timeout = setTimeout(() => fetchFilms(), 700);\r\n      return () => clearTimeout(timeout);\r\n    }\r\n  }, [filmName]);\r\n\r\n  return { items, loading, error, query };\r\n};\r\n\r\nexport const Autocomplete = (props) => {\r\n  const { templateType, filmName } = props;\r\n  const { items, loading, error, query } = useFindFilm(filmName);\r\n  const Template = templates[templateType];\r\n\r\n  const films = templateType === \"Poster\" ? items.slice(0, 3) : items;\r\n  const [focus, setFocus] = useRoveFocus(films.length);\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={styles.autocompleteStyling}>An error has occured.</div>\r\n    );\r\n  }\r\n\r\n  if (loading) {\r\n    return <div className={styles.autocompleteStyling}>Loading...</div>;\r\n  }\r\n\r\n  if (!query) {\r\n    return null;\r\n  } else if (query && items.length === 0) {\r\n    return <div className={styles.autocompleteStyling}>No results</div>;\r\n  } else if (query && items.length !== 0) {\r\n    return (\r\n      <div className={styles.autocompleteStyling}>\r\n        <div\r\n          className={classNames(styles.autocompleteItems, {\r\n            [styles.posters]: templateType === \"Poster\",\r\n          })}\r\n        >\r\n          {films.map((film, i) => (\r\n            <Template\r\n              {...film}\r\n              key={film.id}\r\n              index={i}\r\n              items={films}\r\n              focus={focus === i}\r\n              setFocus={setFocus}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}